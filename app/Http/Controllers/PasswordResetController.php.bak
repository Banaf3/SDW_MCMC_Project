<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Str;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Mail;
use App\Models\Administrator;
use App\Models\AgencyStaff;
use App\Models\PublicUser;

class PasswordResetController extends Controller
{
    /**
     * Show the form to request a password reset link
     */
    public function showRequestForm()
    {
        return view('auth.passwords.email');
    }
    
    /**
     * Send a reset link to the user
     */    public function sendResetLink(Request $request)
    {
        $request->validate(['email' => 'required|email']);
        
        $email = $request->email;
        $token = Str::random(64);
        
        // Check what type of user is trying to reset
        $userTable = $this->getUserTable($email);
        
        if (!$userTable) {
            return back()->withErrors(['email' => 'No account found with this email address.']);
        }
        
        try {
            // Ensure the password_resets table exists
            if (!Schema::hasTable('password_resets')) {
                Schema::create('password_resets', function ($table) {
                    $table->id();
                    $table->string('email')->index();
                    $table->string('token');
                    $table->timestamp('created_at')->nullable();
                });
            }
            
            // Delete any existing tokens for this email
            DB::table('password_resets')->where('email', $email)->delete();
            
            // Add a new token
            DB::table('password_resets')->insert([
                'email' => $email,
                'token' => Hash::make($token),
                'created_at' => Carbon::now()
            ]);
        
        // Create the reset URL
        $resetUrl = url(route('password.reset', [
            'token' => $token,
            'email' => $email,
        ], false));
          // For development purposes, instead of sending an email, let's immediately redirect to the reset form
        // This simulates clicking on the link in the email
        return redirect()->route('password.reset', [
            'token' => $token,
            'email' => $email,
        ])->with('status', 'Email verified! You can now reset your password.');
        
        /* Uncomment this section for production with email
        try {
            Mail::send('auth.emails.password', ['resetUrl' => $resetUrl], function($message) use ($email) {
                $message->to($email);
                $message->subject('Reset Your Password');
            });
            
            return back()->with('status', 'We have emailed your password reset link!');
        } catch (\Exception $e) {
            return back()->withErrors(['email' => 'Could not send reset link. Please try again later.']);
        }
        */
    }
    
    /**
     * Show the password reset form
     */
    public function showResetForm(Request $request, $token = null)
    {
        return view('auth.passwords.reset')->with(
            ['token' => $token, 'email' => $request->email]
        );
    }
    
    /**
     * Reset the password
     */
    public function reset(Request $request)
    {
        $request->validate([
            'token' => 'required',
            'email' => 'required|email',
            'password' => 'required|min:6|confirmed',
        ]);

        $email = $request->email;
        $userTable = $this->getUserTable($email);
        
        if (!$userTable) {
            return back()->withErrors(['email' => 'No account found with this email address.']);
        }
        
        // Check if the token is valid
        $passwordReset = DB::table('password_resets')
            ->where('email', $email)
            ->first();
            
        if (!$passwordReset || !Hash::check($request->token, $passwordReset->token)) {
            return back()->withErrors(['token' => 'Invalid or expired password reset token.']);
        }
        
        // Update the password based on user type
        switch($userTable) {
            case 'administrators':
                Administrator::where('AdminEmail', $email)
                    ->update(['Password' => Hash::make($request->password)]);
                break;
            case 'agency_staff':
                AgencyStaff::where('staffEmail', $email)
                    ->update(['Password' => Hash::make($request->password)]);
                break;
            case 'public_users':
                PublicUser::where('UserEmail', $email)
                    ->update(['Password' => Hash::make($request->password)]);
                break;
            default:
                return back()->withErrors(['email' => 'Could not reset password. Please try again later.']);
        }
        
        // Delete the token
        DB::table('password_resets')->where('email', $email)->delete();
        
        return redirect()->route('login')->with('status', 'Your password has been reset! You can now log in with your new password.');
    }
    
    /**
     * Determine which user table contains the email
     */
    private function getUserTable($email)
    {
        if (strpos($email, '@admin.com') !== false) {
            $exists = Administrator::where('AdminEmail', $email)->exists();
            return $exists ? 'administrators' : null;
        } elseif (strpos($email, '@agency.com') !== false) {
            $exists = AgencyStaff::where('staffEmail', $email)->exists();
            return $exists ? 'agency_staff' : null;
        } else {
            $exists = PublicUser::where('UserEmail', $email)->exists();
            return $exists ? 'public_users' : null;
        }
    }
}
